<!DOCTYPE html>
<html lang="en">
<head>
  <title>Hospital List</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>

<!-- 네비게이션 바 -->
<nav class="navbar navbar-expand-sm bg-dark navbar-dark">
  <div class="container-fluid">
    <a class="navbar-brand" href="/">manboong</a> <!-- 홈페이지 링크 -->
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavbar">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="collapsibleNavbar">
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link" href="/">home</a> <!-- 홈으로 이동 -->
        </li>    
      </ul>
    </div>
  </div>
</nav>

<div class="container">
  <h3>병원목록</h3>
  <!-- 병원 찾기 폼 -->
  <form onsubmit="submit(this)">
    <div class="mb-3 mt-3">
      <!-- 시도 선택하는 드롭다운 -->
      <select class="form-select form-select-sm mt-3" name="sidoNm" id="sidoNm">
        <!-- 서버에서 제공된 시도 목록을 출력 -->
        {{#sidoNms}} 
        <option>{{.}}</option>
        {{/sidoNms}}
      </select>
    </div> 

    <div class="mb-3 mt-3">
      <!-- 구군 선택하는 드롭다운 (시도 선택에 따라 동적으로 채워짐) -->
      <select class="form-select form-select-sm mt-3" name="sgguNm" id="sgguNm">
        <!-- 구군 목록이 동적으로 채워짐 -->
        {{#sgguNms}} 
        <option>{{.}}</option> 
        {{/sgguNms}}
      </select>
    </div>
    <!-- 병원 찾기 버튼 -->
    <button type="button" id="btn-submit" class="btn btn-primary">병원찾기</button>
  </form>

<hr />

  <!-- 병원 정보 테이블 -->
  <table class="table">
    <thead>
      <tr>
        <th>병원 명</th>
        <th>병원 주소</th>
      </tr>
    </thead>
    <tbody id="tbody-hospital">
      <!-- 서버에서 제공된 병원 목록을 반복문으로 출력 -->
      {{#hospitals}} 
      <tr>
        <td>{{yadmNm}}</td> <!-- 병원명 -->
        <td>{{addr}}</td> <!-- 병원 주소 -->
      </tr>
      {{/hospitals}}
    </tbody>
  </table>
</div>

<script>
  // DOM이 완전히 로드된 후 실행되는 코드
  document.addEventListener('DOMContentLoaded', () => {

    // 병원 찾기 버튼에 클릭 이벤트 리스너 추가
    document.querySelector("#btn-submit").addEventListener("click", (e) => {
      e.preventDefault(); // 폼 제출 시 페이지 리로드 방지

      // 시도 및 구군 선택 값 가져오기
      let sidoNm = document.querySelector("#sidoNm").value;
      let sgguNm = document.querySelector("#sgguNm").value;

      // 선택한 시도와 구군 값을 이용하여 병원 정보 가져오기
      getHospital(sidoNm, sgguNm);
    });

    // 병원 정보를 가져오는 비동기 함수
    let getHospital = async (sidoNm, sgguNm) => {
      // 서버에서 병원 데이터를 요청
      let response = await fetch(`http://localhost:8000/api/hospital?sidoNm=${sidoNm}&sgguNm=${sgguNm}`);
      let responsePasing = await response.json();  // JSON 형식으로 응답 파싱

      // 병원 정보를 테이블에 반영
      setHospital(responsePasing);
    };

    // 병원 정보를 테이블에 반영하는 함수
    let setHospital = (responsePasing) => {
      let tbodyHospitalDom = document.querySelector("#tbody-hospital");
      tbodyHospitalDom.innerHTML = '';  // 기존 테이블 내용 초기화

      // 응답 받은 병원 정보를 테이블에 추가
      responsePasing.forEach((e) => {
        let trEL = document.createElement("tr");  // 새로운 tr 요소 생성
        let tdEL1 = document.createElement("td"); // 병원명 td 생성
        let tdEL2 = document.createElement("td"); // 병원 주소 td 생성

        tdEL1.innerHTML = e.yadmNm;  // 병원명
        tdEL2.innerHTML = e.addr;    // 병원 주소

        trEL.append(tdEL1);  // tr에 병원명 추가
        trEL.append(tdEL2);  // tr에 병원 주소 추가

        tbodyHospitalDom.append(trEL);  // tr을 테이블에 추가
      });
    };

    // 구군 선택 드롭다운을 동적으로 설정하는 함수
    let setSgguNm = (responsePasing) => {
      let sgguNmDom = document.querySelector("#sgguNm");
      sgguNmDom.innerHTML = '';  // 기존 옵션 비우기

      // 응답 받은 구군 목록을 옵션으로 추가
      responsePasing.forEach((e) => {
        let optionEL = document.createElement("option");  // 새로운 option 요소 생성
        optionEL.text = e;  // 구군 이름을 텍스트로 설정
        sgguNmDom.append(optionEL);  // 구군 선택 드롭다운에 옵션 추가
      });
    };

    // 시도 선택에 따른 구군 목록 가져오기
    let getSgguNm = async (sidoNm) => {
      // 시도명을 이용해 서버에서 구군 목록을 요청
      let response = await fetch(`http://localhost:8000/api/sgguNm?sidoNm=${sidoNm}`);
      let responsePasing = await response.json();  // JSON 형식으로 응답 파싱

      // 구군 목록을 구군 드롭다운에 설정
      setSgguNm(responsePasing);
    };

    // 시도 선택 드롭다운에서 값이 변경될 때마다 구군 목록을 가져오는 이벤트 리스너
    let sidoNmDom = document.querySelector("#sidoNm");
    sidoNmDom.addEventListener("change", (e) => {
      let sidoNm = e.target.value;  // 선택된 시도명
      // 해당 시도에 맞는 구군 목록을 가져옴
      getSgguNm(sidoNm);
    });
  });
</script>
</body>
</html>
